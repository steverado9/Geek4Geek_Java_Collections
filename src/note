    Java Collection Tutorial
Java Collection Framework holds all the collection classes and interfaces.
The Collection interface (java.util.Collection) and Map interface (java.util.Map).
are the two main “root” interfaces of Java collection classes.
    What is a Framework?
A framework is a set of classes and interfaces which provide a ready-made architecture.
-Collection: A group of individual objects that represent a single entity is known as a collection.
-Collection Framework: To represent a group of objects as a single entity in the Java programming
language we need classes and interfaces defined by the Collection Framework.
-Collection Interface: It is the blueprint of the collection class.
-Collections Class: It is present in java.util package and is a member of Collection Framework.
    Advantages of the collections framework
1) Reduces the programming effort as the programmer does not have to worry about designing the Collection class.
On the same hand java being object-oriented language advances in achieving "abstraction".
Abstraction in Java is the process of hiding internal implementation details and showing only essential functionality to the user.
It focuses on what an object does rather than how it does it.
2)Increases program speed and quality as the programmer now is not worried about thinking best implementation for a specific data structure.
3)The API that implements these interfaces are now having common sets of methods be it of any interfaces such as Collection, Set, List, and Map.

Note: All these collections can be imported using:
import java.util.*;

However, single classes can also be imported by replacing * with the class name
import java.util.ArrayList;
import java.util.LinkedList;

The utility package, "java.util" contains all the classes and interfaces that are required by the collection framework.
The collection framework contains an interface named an "iterable interface" which provides the iterator to iterate through all the collections.

    Iterable interface
is the root interface for the entire collection framework.
The main functionality of this interface is to provide an iterator for the collections.

    The following 6 interfaces are described below
    Collection Interface
contains all the basic methods which every collection has
like adding the data into the collection, removing the data, clearing the data, etc
All these methods are implemented in this interface because these methods are implemented by all the classes irrespective of their style of implementation.
    List Interface
It is a child interface of the collection interface.
It deals with the arrays and lists types of operations like ArrayList, LinkedList, Vector, and Stack.
1)ArrayList
provides us with dynamic arrays in Java
The size of an ArrayList is increased automatically if the collection grows or shrinks.
    ArrayList methods
1) add() :  is used to add elements to the list.
There are two versions of the ArrayList add() method i.e.
one without specifying an index
and another with a specified index.
2)There are 3 ways to remove an element from ArrayList
-Using remove() method by indexes(default)
-Using remove() method by values
-Using remove() method over iterators
Note:
It is not recommended to use ArrayList.remove() when iterating over elements.
when using iterators,
-next is used to get the current element
-while hasNext is used to check if there is a current element
3)set() Method:  is used to replace an element at a specified position with a new value.
This is very useful when we need to update an existing element in an ArrayList while maintaining the list's structure.
    Syntax of ArrayList set() Method
set(int index, E element)
-index: Index of the element to replace.
-element: Element to be stored at the specified position.
Returns Value: It returns the element that was previously at the specified position.
4) How to Remove Duplicates from ArrayList in Java
-Using Iterator
step1: Get the ArrayList with duplicate values.
step2: Create another ArrayList.
step3: Traverse through the first arraylist and store the first appearance of each element into the second arraylist using contains() method.
step4: The second ArrayList contains the elements with duplicates removed.
-using LinkedHashSet
A better way  is to remove duplicates from an ArrayList is to convert it into a Set that does not allow duplicates.
Hence LinkedHashSet is the best option available as this do not allows duplicates as well it preserves the insertion order.
-Using Java 8 Stream.distinct()
You can use the distinct() method from the Stream API
The distinct() method return a new Stream without duplicates elements based on the result returned by equals() method,
which can be used for further processing .
 The actual processing of Stream pipeline starts only after calling terminal methods like forEach() or collect().
5)How to reverse an ArrayList
-a). By writing our own function()
    logic 1
reverseArrayList() method in RevArrayList class contains logic for reversing an arraylist with integer objects.
This method takes an arraylist as a parameter, traverses in reverse order and adds all the elements to the newly created arraylist.
Finally the reversed arraylist is returned.
    logic 2
- Run the loop for n/2 times where 'n' is the number of elements in the arraylist.
- In the first pass, Swap the first and nth element
-In the second pass, Swap the second and (n-1)th element and so on till you reach the mid of the arraylist.
-Return the arraylist after the loop termination.
-b). By using Collections class:
Collections is a class in java.util package which contains various static methods for searching, sorting, reversing, finding max, min....etc
We can make use of the In-built Collections.reverse() method for reversing an arraylist.
It takes a list as an input parameter and returns the reversed list.
-c)Reversing an arraylist of user defined objects
The arraylist is reversed using In-built reverse() method of Collections class.
-d)Using ListIterator

6)Convertng ArrayList to String Array
ArrayList class is derived from the List interface.
Here we are given an ArrayList of strings and the task is to convert the ArrayList to a string array.
Methods:
    Using get() method of ArrayList class
-Get the ArrayList of Strings.
-Find the size of ArrayList using size() method, and Create a String Array of this size.
-Fetch each element of the ArrayList one by one using get() method.
-Assigned each element into String Array using assignment(=) operator.
-Printing string array.
    Using toArray() method of ArrayList class
Here we will be creating an object array to store elements received from ArrayList by creating an array of strings.
-Get the ArrayList of String.
-Convert ArrayList to Object array using toArray() method.
-Iterate and convert each element to the desired type using typecasting.
-Here it is converted to String type and added to the string array.
-Print the string array
    Using copyOf() method of Arrays class
-Get the ArrayList of String
-Convert ArrayList to Object array using toArray() method.
-Convert it to String Array using Arrays.copyOf() method.
-Print String Array.

7)Getting a sub-list from an ArrayList
The subList() method of the ArrayList class in Java is used to retrieve a portion of an ArrayList between specified indices.
When we perform any modifications to the sub list, that will reflect in the original list and vice versa.
    Syntax of ArrayList subList() Method
public List<E> subList(int fromIndex, int toIndex);
    Parameters:
fromIndex: Starting index (inclusive) of the sublist.
toIndex: Ending index (exclusive) of the sublist.
Returns Value: It returns a view of the portion of this list between the specified indices.
    Exception: This method throws the following Exceptions.
-IndexOutOfBoundsException: If an endpoint index value is out of range (fromIndex > size).
-IllegalArgumentException: If an endpoint indices are out of order (fromIndex > toIndex).

    LinkedList in Java
Linked List is a part of the Collection framework present in java.util package.
This class is an implementation of the LinkedList data structure,
which is a linear data structure where the elements are
linked using pointers and addresses, and each element is known as a node.
This class is an implementation of a doubly-linked list data structure.
Note: The nodes cannot be accessed directly instead we have to start from the head and follow the
link until we find the node that we want.
    Internal Working of LinkedList
The size of the list automatically increases when we dynamically add and remove items.
Internally, the LinkedList is implemented using the doubly linked list data structure.
-Doubly linked list:
Each node in a Doubly Linked List contains the data it holds,
a pointer to the next node in the list, and a pointer to the previous node in the list.
We can traverse the list in both directions (forward and backward), which is a key feature of a Doubly Linked List.
    Constructors in the LinkedList
In order to create a LinkedList, we need to create an object of the LinkedList class.
The LinkedList class consists of various constructors that allow the possible creation of the list.
1)LinkedList(): This constructor is used to create an empty linked list.
2) LinkedList(Collection C): This constructor is used to create an ordered list that contains all the elements of a specified collection,
as returned by the collection's iterator.
    Methods for Java LinkedList
1)add(index, element): This method inserts the specified element at the specified position in the list.
2)add(element): This method Appends the specified element to the end of the list.
3)addAll(index, Collection<E>): This method Inserts all of the elements in the specified collection into this list,
starting at the specified position.
4)addAll(Collection<E>): This method Appends all of the elements in the specified collection to the end of this list,
in the order that they are returned by the specified collection's iterator.
5)addFirst(Element): This method Inserts the specified element at the beginning of this list.
6)addLast(Element): This method Appends the specified element to the end of this list.
7)clear(): This method removes all of the elements from this list.\
8)clone(): This method returns a shallow copy of this LinkedList.
9)contains(Object o): This method returns true if this list contains the specified element.
10)descendingIterator(): This method returns an iterator over the elements in this deque in reverse sequential order.
11)element(): This method retrieves but does not remove, the head (first element) of this list.
12)get(int index): This method returns the element at the specified position in this list.
13)getFirst(): This method returns the first element in this list.
14)getLast(): This method returns the last element in this list.
15)indexOf(Object o): This method returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.
16)lastIndexOf(Object o): This method returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.
17)listIterator(int index): This method returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list.
18)offer(E e): This method Adds the specified element as the tail (last element) of this list.
19)offerFirst(E e): This method Inserts the specified element at the front of this list.
20)offerLast(E e): This method Inserts the specified element at the end of this list.
21)peek(): This method retrieves but does not remove, the head (first element) of this list.
22)peekFirst(): This method retrieves, but does not remove, the first element of this list, or returns null if this list is empty.
23)peekLast(): This method retrieves, but does not remove, the last element of this list, or returns null if this list is empty.
24)poll(): This method retrieves and removes the head (first element) of this list.
25)pollFirst(): This method retrieves and removes the first element of this list, or returns null if this list is empty.
26)pollLast(): This method retrieves and removes the last element of this list, or returns null if this list is empty.
27)pop(): This method Pops an element from the stack represented by this list.
28)push(E e): This method pushes an element onto the stack represented by this list.
29)remove(): This method retrieves and removes the head (first element) of this list.
30)remove(int index): This method removes the element at the specified position in this list.
31)remove(Object o): This method removes the first occurrence of the specified element from this list if it is present.
32)removeFirst(): This method removes and returns the first element from this list.
33)removeFirstOccurrence(Object o): This method removes the first occurrence of the specified element in this list
(when traversing the list from head to tail).
34)removeLast(): This method removes and returns the last element from this list.
35)removeLastOccurrence(Object o): This method removes the last occurrence of the specified element in this list
(when traversing the list from head to tail).
36)set(int index, E element): This method replaces the element at the specified position in this list with the specified element.
37)size(): This method returns the number of elements in this list.
38)spliterator(): This method creates a late-binding and fail-fast Spliterator over the elements in this list.
39)toArray(): This method returns an array containing all of the elements in this list in proper sequence (from first to last element).
40)toArray(T[] a): This method returns an array containing all of the elements in this list in proper sequence
(from first to last element); the runtime type of the returned array is that of the specified array.
41)toString(): This method returns a string containing all of the elements in this list in proper sequence (from first to the last element),
each element is separated by commas and the String is enclosed in square brackets.
    The classes that implement the list interface.
-AbstractList: This class is used to implement an unmodifiable list,
for which one needs to only extend this AbstractList Class and implement only the get() and the size() methods.
-CopyOnWriteArrayList: This class implements the list interface.
It is an enhanced version of ArrayList in which all the modifications(add, set, remove, etc.) are implemented by making a fresh copy of the list.